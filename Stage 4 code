package minesweeper

import kotlin.random.Random

fun main() {
    newField()
    showNumbers()
    printField()
    setMarksOnMines()
}

val myField = mutableListOf<String>()
val listForPrint = mutableListOf<String>()
val blocksInRow = 9
val rows = 9
val totalBlocks = blocksInRow * rows
val setOfMines = mutableSetOf<Int>()

val listOfMines = mutableListOf<Int>()
val userListOfMines = mutableListOf<Int>()
var numberOfMines = 0
var userMines = 0

val listOfNumbers = mutableListOf<Int>()

fun newField() {
    myField.clear()
    listForPrint.clear()
    for (i in 1..totalBlocks) {
        myField.add(".")
    }
    listForPrint.addAll(myField)
    putMines()
    for (i in 1..setOfMines.size) {
        myField[setOfMines.first()] = "X"
        setOfMines.remove(setOfMines.first())
    }
}

fun printField() {
    println()
    var counter = 0
    print(" │")
    while (counter < blocksInRow) print(++counter)
    print("│\n—│")
    counter = 0
    while (counter < blocksInRow) {
        print("—")
        counter++
    }
    println("│")
    counter = 0
    for (i in 1..rows) {
        print("$i│")
        print(listForPrint.subList(counter, counter + blocksInRow).joinToString(""))
        counter += blocksInRow
        println("│")
    }
    print("—│")
    counter = 0
    while (counter < blocksInRow) {
        print("—")
        counter++
    }
    println("│")
}

fun setMarksOnMines() {
    var emptyBlocks = 0
    for (i in listForPrint) {
        if (i == ".") {
            emptyBlocks++
        }
    }
    var posOfMine = 0
    print("Set/delete mines marks (x and y coordinates): ")

    val input = readln().split(" ").map { it }.toList()
    try {
        posOfMine = (input[1].toInt() - 1) * blocksInRow + (input[0].toInt() - 1)
        if (listForPrint[posOfMine] == ".") {
            listForPrint[posOfMine] = "*"
            userMines++
            emptyBlocks--
            userListOfMines.add(posOfMine)
        } else if (listForPrint[posOfMine] == "*") {
            listForPrint[posOfMine] = "."
            userMines--
            emptyBlocks++
            userListOfMines.remove(posOfMine)
        } else {
            println("There is a number here!")
            setMarksOnMines()
            return
        }
    } catch (e: Exception) {
        println()
        setMarksOnMines()
        return
    }
    printField()
    if (listOfMines.toSet() == userListOfMines.toSet() && userMines == numberOfMines) {
        println("Congratulations! You found all the mines!")
        return
    }
    if (emptyBlocks > 0) {
        setMarksOnMines()
        return
    }
    if (emptyBlocks == 0 && userMines > numberOfMines) {
        println("You put wrong marks. Remove them to win!")
        setMarksOnMines()
        return
    }
}

fun putMines() {
    setOfMines.clear()
    listOfMines.clear()
    print("How many mines do you want on the field? ")
    val numOfMines = readln().toInt()
    numberOfMines = numOfMines
    if (numOfMines >= totalBlocks) {
        println("You put too many mines. Choose another number!")
        putMines()
        return
    }
    while (setOfMines.size != numOfMines) {
        setOfMines.add(Random.nextInt(0, totalBlocks))
    }
    listOfMines.addAll(setOfMines)
}

fun showNumbers() {
    val newList = listOfMines.sorted().toMutableList()
    listOfNumbers.clear()
    for (i in 0..myField.lastIndex) {
        if (myField[i] == "X") listOfNumbers.add(9) else listOfNumbers.add(0)
    }
    for (i in newList) {
        setNumber(i)
    }
    for (i in 0..listOfNumbers.lastIndex) {
        if (listOfNumbers[i] != 9 && listOfNumbers[i] != 0) {
            listForPrint[i] = listOfNumbers[i].toString()
        }
    }
}

fun setNumber(num: Int) {

    val a1 = num - blocksInRow - 1
    val a2 = num - blocksInRow
    val a3 = num - blocksInRow + 1
    val a4 = num - 1
    val a5 = num + 1
    val a6 = num + blocksInRow - 1
    val a7 = num + blocksInRow
    val a8 = num + blocksInRow + 1

    if (num == 0) {
        if (listOfNumbers[a5] != 9) listOfNumbers[a5] += 1
        if (listOfNumbers[a7] != 9) listOfNumbers[a7] += 1
        if (listOfNumbers[a8] != 9) listOfNumbers[a8] += 1
    } else if (num == blocksInRow - 1) {
        if (listOfNumbers[a4] != 9) listOfNumbers[a4] += 1
        if (listOfNumbers[a6] != 9) listOfNumbers[a6] += 1
        if (listOfNumbers[a7] != 9) listOfNumbers[a7] += 1
    } else if (num == listOfNumbers.lastIndex) {
        if (listOfNumbers[a4] != 9) listOfNumbers[a4] += 1
        if (listOfNumbers[a1] != 9) listOfNumbers[a1] += 1
        if (listOfNumbers[a2] != 9) listOfNumbers[a2] += 1
    } else if (num == listOfNumbers.size - blocksInRow) {
        if (listOfNumbers[a2] != 9) listOfNumbers[a2] += 1
        if (listOfNumbers[a3] != 9) listOfNumbers[a3] += 1
        if (listOfNumbers[a5] != 9) listOfNumbers[a5] += 1
    } else if (num % blocksInRow == 0 && num > 0 && num < listOfNumbers.size - blocksInRow) {
        if (listOfNumbers[a2] != 9) listOfNumbers[a2] += 1
        if (listOfNumbers[a3] != 9) listOfNumbers[a3] += 1
        if (listOfNumbers[a5] != 9) listOfNumbers[a5] += 1
        if (listOfNumbers[a8] != 9) listOfNumbers[a8] += 1
        if (listOfNumbers[a7] != 9) listOfNumbers[a7] += 1
    } else if (num in 1..blocksInRow - 2) {
        if (listOfNumbers[a5] != 9) listOfNumbers[a5] += 1
        if (listOfNumbers[a8] != 9) listOfNumbers[a8] += 1
        if (listOfNumbers[a7] != 9) listOfNumbers[a7] += 1
        if (listOfNumbers[a6] != 9) listOfNumbers[a6] += 1
        if (listOfNumbers[a4] != 9) listOfNumbers[a4] += 1
    } else if ((num + 1) % blocksInRow == 0 && num > blocksInRow && num < listOfNumbers.lastIndex) {
        if (listOfNumbers[a2] != 9) listOfNumbers[a2] += 1
        if (listOfNumbers[a1] != 9) listOfNumbers[a1] += 1
        if (listOfNumbers[a4] != 9) listOfNumbers[a4] += 1
        if (listOfNumbers[a6] != 9) listOfNumbers[a6] += 1
        if (listOfNumbers[a7] != 9) listOfNumbers[a7] += 1
    } else if (num in listOfNumbers.size - blocksInRow..<listOfNumbers.lastIndex) {
        if (listOfNumbers[a4] != 9) listOfNumbers[a4] += 1
        if (listOfNumbers[a1] != 9) listOfNumbers[a1] += 1
        if (listOfNumbers[a2] != 9) listOfNumbers[a2] += 1
        if (listOfNumbers[a3] != 9) listOfNumbers[a3] += 1
        if (listOfNumbers[a5] != 9) listOfNumbers[a5] += 1
    } else {
        if (listOfNumbers[a1] != 9) listOfNumbers[a1] += 1
        if (listOfNumbers[a2] != 9) listOfNumbers[a2] += 1
        if (listOfNumbers[a3] != 9) listOfNumbers[a3] += 1
        if (listOfNumbers[a4] != 9) listOfNumbers[a4] += 1
        if (listOfNumbers[a5] != 9) listOfNumbers[a5] += 1
        if (listOfNumbers[a6] != 9) listOfNumbers[a6] += 1
        if (listOfNumbers[a7] != 9) listOfNumbers[a7] += 1
        if (listOfNumbers[a8] != 9) listOfNumbers[a8] += 1
    }

}
